#
# ~/.bashrc
#

[[ $- != *i* ]] && return

colors() {
	local fgc bgc vals seq0

	printf "Color escapes are %s\n" '\e[${value};...;${value}m'
	printf "Values 30..37 are \e[33mforeground colors\e[m\n"
	printf "Values 40..47 are \e[43mbackground colors\e[m\n"
	printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

	# foreground colors
	for fgc in {30..37}; do
		# background colors
		for bgc in {40..47}; do
			fgc=${fgc#37} # white
			bgc=${bgc#40} # black

			vals="${fgc:+$fgc;}${bgc}"
			vals=${vals%%;}

			seq0="${vals:+\e[${vals}m}"
			printf "  %-9s" "${seq0:-(default)}"
			printf " ${seq0}TEXT\e[m"
			printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
		done
		echo; echo
	done
}

[ -r /usr/share/bash-completion/bash_completion ] && . /usr/share/bash-completion/bash_completion

# Change the window title of X terminals
case ${TERM} in
	xterm*|rxvt*|Eterm*|aterm|kterm|gnome*|interix|konsole*)
		PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\007"'
		;;
	screen*)
		PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\033\\"'
		;;
esac

use_color=true

# Set colorful PS1 only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS.  Try to use the external file
# first to take advantage of user additions.  Use internal bash
# globbing instead of external grep binary.
safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
match_lhs=""
[[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
[[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
[[ -z ${match_lhs}    ]] \
	&& type -P dircolors >/dev/null \
	&& match_lhs=$(dircolors --print-database)
[[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true

if ${use_color} ; then
	# Enable colors for ls, etc.  Prefer ~/.dir_colors
	if type -P dircolors >/dev/null ; then
		if [[ -f ~/.dir_colors ]] ; then
			eval $(dircolors -b ~/.dir_colors)
		elif [[ -f /etc/DIR_COLORS ]] ; then
			eval $(dircolors -b /etc/DIR_COLORS)
		fi
	fi

	if [[ ${EUID} == 0 ]] ; then
		PS1='\[\033[01;38m\][\h\[\033[01;38m\] \W\[\033[01;38m\]]\$\[\033[00m\] '
	else

		PS1='\[\033[00;01;07;34m\] \@ \[\033[00;01;30m\] [\[\033[34m\]\u\[\033[00;01;30m\]] [\[\033[34m\]\w\[\033[00;01;30m\]]$\[\033[00;02;38m\] '
		# PS1='\[\033[00;01;31;40m\][ \[\033[01;34m\]\u\]\[\033[01;28m\] \h\]\[\033[01;30m\] ]\]\]\[\033[00;01;36m\] \W\$\]\[\033[00;01;37m\] '
		# PS1='\[\033[01;38m\][\u@\h\[\033[01;38m\] \W\[\033[01;38m\]]\$\[\033[01;38m\] '
	fi

	alias ls='ls --color=auto'
	alias grep='grep --colour=auto'
	alias egrep='egrep --colour=auto'
	alias fgrep='fgrep --colour=auto'
else
	if [[ ${EUID} == 0 ]] ; then
		# show root@ when we don't have colors
		PS1='\u@\h \W \$ '
	else
		PS1='\u@\h \w \$ '
	fi
fi

unset use_color safe_term match_lhs sh

alias cp="cp -i"                          # confirm before overwriting something
alias df='df -h'                          # human-readable sizes
alias free='free -m'                      # show sizes in MB
alias np='nano -w PKGBUILD'


# Bash won't get SIGWINCH if another process is in the foreground.
# Enable checkwinsize so that bash will check the terminal size when
# it regains control.  #65623
# http://cnswww.cns.cwru.edu/~chet/bash/FAQ (E11)
shopt -s checkwinsize

shopt -s expand_aliases

# export QT_SELECT=4

# Enable history appending instead of overwriting.  #139609
shopt -s histappend

#
# # ex - archive extractor
# # usage: ex <file>
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

nnn_cd()                                                                                                   
{
    if ! [ -z "$NNN_PIPE" ]; then
        printf "%s\0" "0c${PWD}" > "${NNN_PIPE}" !&
    fi  
}

trap nnn_cd EXIT

# ----------------------------------------------------------------------
# MY FUNCTIONS
# ----------------------------------------------------------------------
acheck() {
	compgen -c | grep -x "${1}"
}

pifs() {
	printf "%q" "${IFS}"; echo ""
}

ppifs() {
	printf "IFS=%q" "${IFS}"; echo ""
}

nifs() {
	IFS=$'\n'; printf "IFS=%q" "${IFS}"; echo ""

}

rifs() {
	IFS=$' \t\n'; printf "IFS=%q" "${IFS}"; echo ""
}

#f() {
#	if [[ "$#" -eq "1" ]] ; then 
#		find / -iname "${1}"
#	elif [[ "$#" -eq "2" ]] ; then
#		find "${1}" -iname "${2}"
#	else
#		find "${1}" -type "${2}" -iname "${3}"
#	fi
#}
#
#fw() {
#	if [[ "$#" -eq "1" ]] ; then 
#		find / -iwholename "${1}"
#	else
#		find "${1}" -iwholename "${2}"
#	fi
#}

#-----COPY-AND-PASTE-----FUNCTIONS--------------------------------------
cop() {
	echo "XSEL CLIP: $(echo ${1} | xsel -bi)"
}
pas() {
	echo "$(xsel -bo)"
}
pasta() {
	cat <<< $(pas)
}
kad() {
	docker kill $(docker ps -q)
}
rad() {
	docker rm $(docker ps -a -q)
}


# ----------------------------------------------------------------------
# MY ALIASES
# ----------------------------------------------------------------------
alias		  sudo='sudo '

alias		  rm='echo "rm has been replaced with this message use trash-put or /bin/rm instead."'
alias		  rmi='rm -i'
#alias		   rename="CAREFUL use ren instead for (no-act) then irent with confirmation (act)."

alias		  ren="perl-rename -v -n"
alias		  reni="perl-rename -i"
alias		  tr="trash-put -i"

alias		  pacse='echo ""; pacman -Ss'
alias		  yayse='echo ""; yay -Ss'

alias		  pacsel='echo ""; pacman -Qs'
alias		  yaysel='echo ""; yay -Qs'

alias		  yayi='echo ""; yay -Si'
alias		  paci='echo ""; pacman -Si'

alias		  yayil='echo ""; yay -Qi'
alias		  pacil='echo ""; pacman -Qi'

alias		  snv="sudoedit"

alias		  img="nsxiv"
alias		  ic="clear; imgcat"
alias		  ci="imgcat"
alias		  c="clear"

alias		  ldi="fdisk -l -o +uuid"
alias		  ldm="cat /proc/mounts | grep -P \"/dev/[^ ]+\""
alias		  lm="cat /proc/mounts"
alias		  szof="du -ahc --time --max-depth=1"

alias		  lsd="ls -lh"
alias		  lst="ls -ltrh"
alias		  lsz="ls -lSrh"
alias		  lsad="ls -larh"
alias		  lsat="ls -latrh"
alias		  lsaz="ls -laSrh"

alias		  psg="ps ax | grep --ignore-case"
alias		  psp="ps ax | grep --perl-regexp --ignore-case"
alias		  pe="ps -eo comm=,"
alias		  po="ps -eo cmd=,"
alias		  pse="ps -eo comm=, | grep --ignore-case"
alias		  pso="ps -eo cmd=, | grep --ignore-case"
alias		  tre="ps -ejH"
alias		  trev="ps axjf"
alias		  tres="ps -eHo euser,ruser,suser,fuser,f,comm,label"

alias		  gr="grep --perl-regexp --ignore-case"
alias		  grd="grep --ignore-case"


alias		  nv="nvim"
alias		  n="nvim"
alias		  r="nv -R"
alias		  g="gvim"

alias		  rg="ranger"
alias		  scm="sc-im"

alias		  ted="-D $HOME/CLONED/teddit/ docker compose up"
alias		  bib="cd $HOME/CLONED/bibliogram/; docker compose up"
alias		  qs="ssh tesmond@45.77.222.97"

alias		  desk="cd $HOME/Desktop/"
alias		  docs="cd $HOME/Documents/"
alias		  pics="cd $HOME/Pictures/"
alias		  code="cd $HOME/Desktop/Coding/"
alias		  down="cd $HOME/Downloads/"
alias		  mbin="cd $HOME/bin/"
alias		  prof="cd $HOME/Documents/PROF_AND_WORK/"
alias		  ebash="nvim $HOME/.bashrc"

alias		  sa="alias | grep --ignore-case --perl-regexp"
alias		  sf="declare -F | grep --ignore-case --perl-regexp"
alias		  sfi="declare -f | grep --ignore-case --perl-regexp"
alias		  s='echo "$(alias & declare -F)" | grep --ignore-case perl-regexp'

#-----		  ---------------------------EXTRA---------------------#

alias		  searchpac='echo ""; pacman -Ss'
alias		  searchyay='echo ""; yay -Ss'

alias		  searchpaclocal='echo ""; pacman -Qs'
alias		  searchyaylocal='echo ""; yay -Qs'

alias		  searchYayInfo='echo ""; yay -Si'
alias		  searchPacInfo='echo ""; pacman -Si'

alias		  searchYayInfoLocal='echo ""; yay -Qi'
alias		  searchPacInfoLocal='echo ""; pacman -Qi'

alias		  viewImage="nsxiv"
alias		  viewImageInTerminal="clear; imgcat"

alias		  listDisks="fdisk -l -o +uuid"
alias 		  listDevicesMounted="cat /proc/mounts | grep -P \"/dev/[^ ]+\""
alias		  listAllMounted="cat /proc/mounts"
alias		  sizeOfTrue="du -ahc --time --max-depth=1"

alias		  lsSortAlpha="ls -lrh"
alias		  lsSortTime="ls -ltrh"
alias		  lsSortSize="ls -lSrh"

alias	   	  lsSortAlphaHidden="ls -larh"
alias		  lsSortTimeHidden="ls -latrh"
alias 		  lsSortSizeHidden="ls -laSrh"

alias		   searchPs="ps ax | grep --ignore-case --perl-regexp"
alias		   showPs="ps -eo comm=,"
alias		   showPsTree="ps -ejH"
alias	   	   showPsTreeVerbose="ps axjf"
alias		   showPsSecurity="ps -eHo euser,ruser,suser,fuser,f,comm,label"

alias		   nvimreadonly="nv -R"

alias		   runTeddit="cd $HOME/CLONED/teddit/; docker compose up"
alias		   sshMyWebServer="ssh tesmond@45.77.222.97"

alias 		   EditBashrc="nvim $HOME/.bashrc"

alias 		   searchMyAliases="alias | grep --ignore-case --perl-regexp"
alias 		   searchFunctionsNames="declare -F | grep --ignore-case --perl-regexp"
alias 		   searchFunctionsDefined="declare -f | grep --ignore-case --perl-regexp"
alias 		   searchAliasesFunctions='echo "$(alias & declare -F)" | grep --ignore-case perl-regexp'


#alias 			 ph="phoronix-test-suite"
#alias 		  bench="phoronix-test-suite"
alias 			pre="okular"


#--------DJANGO-MY-WEB-SERVER-ALIASES-EXPORTS---------------------------
#alias  djhelp='echo "alias djst=python3 $HOME/mywebsitepython____EFEF/mysite/mysite/manage.py";echo "alias  djva=source $HOME/mywebsitepython____EFEF/myvenv/bin/activate";echo "export DJMY=$HOME/mywebsitepython____EFEF/mysite/";echo "export DJMMY=$HOME/mywebsitepython____EFEF/mysite/mysite/";echo "export DJSET=$HOME/mywebsitepython____EFEF/mysite/mysite/settings.py";echo "export DSET=$HOME/mywebsitepython____EFEF/mysite/mysite/settings.py"'
#alias  djst="python3 $HOME/mywebsitepython____EFEF/mysite/mysite/manage.py"
#alias  djva="source $HOME/mywebsitepython____EFEF/myvenv/bin/activate"
#alias  ncat="cat -n"
#export DJMY="$HOME/mywebsitepython____EFEF/mysite/"
#export DJMMY="$HOME/mywebsitepython____EFEF/mysite/mysite/"
#export DJSET="$HOME/mywebsitepython____EFEF/mysite/mysite/settings.py"
#export DSET="$HOME/mywebsitepython____EFEF/mysite/mysite/settings.py"
# ----------------------------------------------------------------------
# MY EXPORTS
# ----------------------------------------------------------------------
export MYPRINTER="MYPRINT"
export NNN_COPIER="$HOME/nscript/csript"
export DOCS="$HOME/Documents/"
export DESK="$HOME/Desktop/"
export DOWN="$HOME/Downloads/"
export MYSTUFF="$HOME/Documents/MyStuff/"
export EDITOR="nvim"
export NVIMSWAP="$HOME/.local/share/nvim/swap/"
export DEFAULT_IFS=$' \t\n'
export AUTOBACKUP="$HOME/BACKUP_FILES/AUTO_BACKUP/"
#-PATHS-EXPORT----------------------------------------------------------
#-----------------BIN
if  [ -d "$HOME/bin/" ] ; then
	PATH="$HOME/bin/:$PATH"
fi
if  [ -d "$HOME/bin/i3wm" ] ; then
	PATH="$HOME/bin/i3wm:$PATH"
fi
if  [ -d "$HOME/bin/personal" ] ; then
	PATH="$HOME/bin/personal:$PATH"
fi 
if  [ -d "$HOME/bin/personal" ] ; then
	PATH="$HOME/bin/personal:$PATH"
fi 
if  [ -d "$HOME/bin/ufw" ] ; then
	PATH="$HOME/bin/ufw:$PATH"
fi

if  [ -d "$HOME/bin/random" ] ; then
	PATH="$HOME/bin/random:$PATH"
fi
#--------------------

if  [ -d "$HOME/Desktop/Coding/pyprog" ] ; then
	PATH="$HOME/Desktop/Coding/pyprog:$PATH"
fi

if  [ -d "$HOME/Documents/Documentation" ] ; then
	PATH="$HOME/Documents/Documentation:$PATH"
fi

#-SET-TERMINAL-TO-VI----------------------------------------------------
set -o vi

#-KITTY-SHELL-INTEGRATION-----------------------------------------------
if test -n "$KITTY_INSTALLATION_DIR" -a -e "$KITTY_INSTALLATION_DIR/shell-integration/bash/kitty.bash"; then source "$KITTY_INSTALLATION_DIR/shell-integration/bash/kitty.bash"; fi

# BEGIN_KITTY_SHELL_INTEGRATION
if test -n "$KITTY_INSTALLATION_DIR" -a -e "$KITTY_INSTALLATION_DIR/shell-integration/bash/kitty.bash"; then source "$KITTY_INSTALLATION_DIR/shell-integration/bash/kitty.bash"; fi
# END_KITTY_SHELL_INTEGRATION


